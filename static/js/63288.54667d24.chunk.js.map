{"version":3,"file":"static/js/63288.54667d24.chunk.js","mappings":"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","sources":["../node_modules/thirdweb/src/rpc/actions/eth_sendRawTransaction.ts","../node_modules/thirdweb/src/utils/bigint.ts","../node_modules/viem/zksync/constants/number.ts","../node_modules/viem/zksync/errors/bytecode.ts","../node_modules/thirdweb/src/transaction/actions/zksync/getEip721Domain.ts","../node_modules/viem/zksync/utils/hashBytecode.ts","../node_modules/thirdweb/src/transaction/actions/zksync/send-eip712-transaction.ts","../node_modules/thirdweb/src/utils/encoding/helpers/concat-hex.ts","../node_modules/viem/constants/number.ts","../node_modules/viem/utils/encoding/toRlp.ts","../node_modules/viem/node_modules/@noble/hashes/src/_md.ts","../node_modules/viem/node_modules/@noble/hashes/src/sha256.ts","../node_modules/viem/utils/hash/sha256.ts"],"sourcesContent":["import type { EIP1193RequestFn, EIP1474Methods, Hex } from \"viem\";\n\n/**\n * Sends a raw transaction to the Ethereum network.\n * @param request - The EIP1193 request function.\n * @param signedTransaction - The signed transaction in hex format.\n * @returns A promise that resolves to the transaction hash.\n * @rpc\n * @example\n * ```ts\n * import { getRpcClient, eth_sendRawTransaction } from \"thirdweb/rpc\";\n * const rpcRequest = getRpcClient({ client, chain });\n * const transactionHash = await eth_sendRawTransaction(rpcRequest, \"0x...\");\n * ```\n */\nexport async function eth_sendRawTransaction(\n  request: EIP1193RequestFn<EIP1474Methods>,\n  signedTransaction: Hex,\n) {\n  return await request({\n    method: \"eth_sendRawTransaction\",\n    params: [signedTransaction],\n  });\n}\n","import { uint8ArrayToHex } from \"./encoding/hex.js\";\n\n/**\n * Returns the minimum of two BigInt values.\n * @param a - The first BigInt value.\n * @param b - The second BigInt value.\n * @returns The smaller of the two BigInt values.\n * @utils\n * @example\n * ```ts\n * min(1n, 2n)\n * // 1n\n */\nexport function min(a: bigint, b: bigint) {\n  return a < b ? a : b;\n}\n\n/**\n * Returns the maximum of two BigInt values.\n * @param a - The first BigInt value.\n * @param b - The second BigInt value.\n * @returns The larger of the two BigInt values.\n * @utils\n * @example\n * ```ts\n * max(1n, 2n)\n * // 2n\n */\nexport function max(a: bigint, b: bigint) {\n  return a > b ? a : b;\n}\n\n/**\n * Provides error checking on string or number bigint inputs.\n * @param value - A possibly integer-like string, number, or bigint.\n * @returns The bigint representation of the input.\n * @example\n * ```ts\n * toBigInt(\"2\")\n * // 2n\n */\nexport function toBigInt(value: string | number | bigint | Uint8Array): bigint {\n  if (\n    [\"string\", \"number\"].includes(typeof value) &&\n    !Number.isInteger(Number(value))\n  ) {\n    throw new Error(\n      `Expected value to be an integer to convert to a bigint, got ${value} of type ${typeof value}`,\n    );\n  }\n\n  if (value instanceof Uint8Array) {\n    return BigInt(uint8ArrayToHex(value));\n  }\n\n  return BigInt(value);\n}\n","import { maxUint16 } from '../../constants/number.js'\n\nexport const gasPerPubdataDefault = 50000n\nexport const maxBytecodeSize = maxUint16 * 32n\n","import { BaseError } from '../../errors/base.js'\n\nexport type BytecodeLengthExceedsMaxSizeErrorType =\n  BytecodeLengthExceedsMaxSizeError & {\n    name: 'BytecodeLengthExceedsMaxSizeError'\n  }\n\nexport class BytecodeLengthExceedsMaxSizeError extends BaseError {\n  constructor({\n    givenLength,\n    maxBytecodeSize,\n  }: { givenLength: number; maxBytecodeSize: bigint }) {\n    super(\n      `Bytecode cannot be longer than ${maxBytecodeSize} bytes. Given length: ${givenLength}`,\n      { name: 'BytecodeLengthExceedsMaxSizeError' },\n    )\n  }\n}\n\nexport type BytecodeLengthInWordsMustBeOddErrorType =\n  BytecodeLengthInWordsMustBeOddError & {\n    name: 'BytecodeLengthInWordsMustBeOddError'\n  }\n\nexport class BytecodeLengthInWordsMustBeOddError extends BaseError {\n  constructor({ givenLengthInWords }: { givenLengthInWords: number }) {\n    super(\n      `Bytecode length in 32-byte words must be odd. Given length in words: ${givenLengthInWords}`,\n      { name: 'BytecodeLengthInWordsMustBeOddError' },\n    )\n  }\n}\n\nexport type BytecodeLengthMustBeDivisibleBy32ErrorType =\n  BytecodeLengthMustBeDivisibleBy32Error & {\n    name: 'BytecodeLengthMustBeDivisibleBy32Error'\n  }\n\nexport class BytecodeLengthMustBeDivisibleBy32Error extends BaseError {\n  constructor({ givenLength }: { givenLength: number }) {\n    super(\n      `The bytecode length in bytes must be divisible by 32. Given length: ${givenLength}`,\n      { name: 'BytecodeLengthMustBeDivisibleBy32Error' },\n    )\n  }\n}\n","import type { TransactionSerializable } from \"viem\";\nimport { hashBytecode } from \"viem/zksync\";\nimport type { Address } from \"../../../utils/address.js\";\nimport { toHex } from \"../../../utils/encoding/hex.js\";\nimport type {\n  EIP712SerializedTransaction,\n  EIP712TransactionOptions,\n} from \"../../prepare-transaction.js\";\n\nexport type EIP721TransactionSerializable = TransactionSerializable & {\n  from: Address;\n} & EIP712TransactionOptions;\nexport const gasPerPubdataDefault = 50000n;\n\nexport const getEip712Domain = (transaction: EIP721TransactionSerializable) => {\n  const message = transactionToMessage(transaction);\n\n  return {\n    domain: {\n      name: \"zkSync\",\n      version: \"2\",\n      chainId: transaction.chainId,\n    },\n    types: {\n      Transaction: [\n        { name: \"txType\", type: \"uint256\" },\n        { name: \"from\", type: \"uint256\" },\n        { name: \"to\", type: \"uint256\" },\n        { name: \"gasLimit\", type: \"uint256\" },\n        { name: \"gasPerPubdataByteLimit\", type: \"uint256\" },\n        { name: \"maxFeePerGas\", type: \"uint256\" },\n        { name: \"maxPriorityFeePerGas\", type: \"uint256\" },\n        { name: \"paymaster\", type: \"uint256\" },\n        { name: \"nonce\", type: \"uint256\" },\n        { name: \"value\", type: \"uint256\" },\n        { name: \"data\", type: \"bytes\" },\n        { name: \"factoryDeps\", type: \"bytes32[]\" },\n        { name: \"paymasterInput\", type: \"bytes\" },\n      ],\n    },\n    primaryType: \"Transaction\",\n    message: message,\n  };\n};\n\nfunction transactionToMessage(\n  transaction: EIP721TransactionSerializable,\n): EIP712SerializedTransaction {\n  const {\n    gas,\n    nonce,\n    to,\n    from,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    paymaster,\n    paymasterInput,\n    gasPerPubdata,\n    data,\n    factoryDeps,\n  } = transaction;\n\n  return {\n    txType: 113n,\n    from: BigInt(from),\n    to: to ? BigInt(to) : 0n,\n    gasLimit: gas ?? 0n,\n    gasPerPubdataByteLimit: gasPerPubdata ?? gasPerPubdataDefault,\n    maxFeePerGas: maxFeePerGas ?? 0n,\n    maxPriorityFeePerGas: maxPriorityFeePerGas ?? 0n,\n    paymaster: paymaster ? BigInt(paymaster) : 0n,\n    nonce: nonce ? BigInt(nonce) : 0n,\n    value: value ?? 0n,\n    data: data ? data : \"0x0\",\n    factoryDeps: factoryDeps?.map((dep) => toHex(hashBytecode(dep))) ?? [],\n    paymasterInput: paymasterInput ? paymasterInput : \"0x\",\n  };\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport { pad } from '../../utils/data/pad.js'\nimport { type ToBytesErrorType, toBytes } from '../../utils/encoding/toBytes.js'\nimport { type Sha256ErrorType, sha256 } from '../../utils/hash/sha256.js'\nimport { maxBytecodeSize } from '../constants/number.js'\nimport {\n  BytecodeLengthExceedsMaxSizeError,\n  type BytecodeLengthExceedsMaxSizeErrorType,\n  BytecodeLengthInWordsMustBeOddError,\n  type BytecodeLengthInWordsMustBeOddErrorType,\n  BytecodeLengthMustBeDivisibleBy32Error,\n  type BytecodeLengthMustBeDivisibleBy32ErrorType,\n} from '../errors/bytecode.js'\n\nexport type HashBytecodeErrorType =\n  | BytecodeLengthExceedsMaxSizeErrorType\n  | BytecodeLengthInWordsMustBeOddErrorType\n  | BytecodeLengthMustBeDivisibleBy32ErrorType\n  | Sha256ErrorType\n  | ToBytesErrorType\n  | ErrorType\n\nexport function hashBytecode(bytecode: Hex): Uint8Array {\n  const bytecodeBytes = toBytes(bytecode)\n  if (bytecodeBytes.length % 32 !== 0)\n    throw new BytecodeLengthMustBeDivisibleBy32Error({\n      givenLength: bytecodeBytes.length,\n    })\n\n  if (bytecodeBytes.length > maxBytecodeSize)\n    throw new BytecodeLengthExceedsMaxSizeError({\n      givenLength: bytecodeBytes.length,\n      maxBytecodeSize,\n    })\n\n  const hashStr = sha256(bytecodeBytes)\n  const hash = toBytes(hashStr)\n\n  // Note that the length of the bytecode\n  // should be provided in 32-byte words.\n  const bytecodeLengthInWords = bytecodeBytes.length / 32\n  if (bytecodeLengthInWords % 2 === 0) {\n    throw new BytecodeLengthInWordsMustBeOddError({\n      givenLengthInWords: bytecodeLengthInWords,\n    })\n  }\n\n  const bytecodeLength = toBytes(bytecodeLengthInWords)\n\n  // The bytecode should always take the first 2 bytes of the bytecode hash,\n  // so we pad it from the left in case the length is smaller than 2 bytes.\n  const bytecodeLengthPadded = pad(bytecodeLength, { size: 2 })\n\n  const codeHashVersion = new Uint8Array([1, 0])\n  hash.set(codeHashVersion, 0)\n  hash.set(bytecodeLengthPadded, 2)\n\n  return hash\n}\n","import { hexToBytes, toRlp } from \"viem\";\nimport { eth_sendRawTransaction } from \"../../../rpc/actions/eth_sendRawTransaction.js\";\nimport { getRpcClient } from \"../../../rpc/rpc.js\";\nimport { toBigInt } from \"../../../utils/bigint.js\";\nimport { concatHex } from \"../../../utils/encoding/helpers/concat-hex.js\";\nimport { type Hex, numberToHex, toHex } from \"../../../utils/encoding/hex.js\";\nimport { resolvePromisedValue } from \"../../../utils/promise/resolve-promised-value.js\";\nimport type { Account } from \"../../../wallets/interfaces/wallet.js\";\nimport type { PreparedTransaction } from \"../../prepare-transaction.js\";\nimport { encode } from \"../encode.js\";\nimport { toSerializableTransaction } from \"../to-serializable-transaction.js\";\nimport type { WaitForReceiptOptions } from \"../wait-for-tx-receipt.js\";\nimport {\n  type EIP721TransactionSerializable,\n  gasPerPubdataDefault,\n  getEip712Domain,\n} from \"./getEip721Domain.js\";\n\ntype SendEip712TransactionOptions = {\n  account: Account;\n  // TODO: update this to `Transaction<\"prepared\">` once the type is available to ensure only prepared transactions are accepted\n  // biome-ignore lint/suspicious/noExplicitAny: library function that accepts any prepared transaction type\n  transaction: PreparedTransaction<any>;\n};\n\n/**\n * Sends a transaction using the provided wallet.\n * @param options - The options for sending the transaction.\n * @returns A promise that resolves to the transaction hash.\n * @throws An error if the wallet is not connected.\n * @transaction\n * @example\n * ```ts\n * import { sendTransaction } from \"thirdweb\";\n *\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction\n * });\n * ```\n */\nexport async function sendEip712Transaction(\n  options: SendEip712TransactionOptions,\n): Promise<WaitForReceiptOptions> {\n  const { account, transaction } = options;\n\n  const eip712Transaction = await populateEip712Transaction(options);\n\n  const hash = await signEip712Transaction({\n    account,\n    eip712Transaction,\n    chainId: transaction.chain.id,\n  });\n\n  const rpc = getRpcClient(transaction);\n  const result = await eth_sendRawTransaction(rpc, hash);\n\n  return {\n    transactionHash: result,\n    chain: transaction.chain,\n    client: transaction.client,\n  };\n}\n\nexport async function signEip712Transaction(options: {\n  account: Account;\n  eip712Transaction: EIP721TransactionSerializable;\n  chainId: number;\n}): Promise<Hex> {\n  const { account, eip712Transaction, chainId } = options;\n  // EIP712 signing of the serialized tx\n  const eip712Domain = getEip712Domain(eip712Transaction);\n\n  const customSignature = await account.signTypedData({\n    // biome-ignore lint/suspicious/noExplicitAny: TODO type properly\n    ...(eip712Domain as any),\n  });\n\n  return serializeTransactionEIP712({\n    ...eip712Transaction,\n    chainId,\n    customSignature,\n  });\n}\n\nexport async function populateEip712Transaction(\n  options: SendEip712TransactionOptions,\n): Promise<EIP721TransactionSerializable> {\n  const { account, transaction } = options;\n  let [data, to, value, gas, maxFeePerGas, maxPriorityFeePerGas, eip712] =\n    await Promise.all([\n      encode(transaction),\n      resolvePromisedValue(transaction.to),\n      resolvePromisedValue(transaction.value),\n      resolvePromisedValue(transaction.gas),\n      resolvePromisedValue(transaction.maxFeePerGas),\n      resolvePromisedValue(transaction.maxPriorityFeePerGas),\n      resolvePromisedValue(transaction.eip712),\n    ]);\n  let gasPerPubdata = eip712?.gasPerPubdata;\n  if (!gas || !maxFeePerGas || !maxPriorityFeePerGas) {\n    // fetch fees and gas\n    const rpc = getRpcClient(transaction);\n    const result = (await rpc({\n      // biome-ignore lint/suspicious/noExplicitAny: TODO add to RPC method types\n      method: \"zks_estimateFee\" as any,\n      params: [\n        {\n          from: account.address,\n          to,\n          data,\n          value: value ? numberToHex(value) : undefined,\n          gasPerPubdata,\n          eip712Meta: {\n            ...eip712,\n            gasPerPubdata: gasPerPubdata ? toHex(gasPerPubdata) : toHex(50000n),\n            factoryDeps: eip712?.factoryDeps?.map((dep) =>\n              Array.from(hexToBytes(dep)),\n            ),\n          },\n          type: \"0x71\",\n          // biome-ignore lint/suspicious/noExplicitAny: TODO add to RPC method types\n        } as any,\n      ],\n    })) as {\n      gas_limit: string;\n      max_fee_per_gas: string;\n      max_priority_fee_per_gas: string;\n      gas_per_pubdata_limit: string;\n    };\n    gas = toBigInt(result.gas_limit);\n    const baseFee = toBigInt(result.max_fee_per_gas);\n    maxFeePerGas = baseFee * 2n; // bumping the base fee per gas to ensure fast inclusion\n    maxPriorityFeePerGas = toBigInt(result.max_priority_fee_per_gas) || 1n;\n    gasPerPubdata = toBigInt(result.gas_per_pubdata_limit) * 2n; // doubling for fast inclusion;\n  }\n\n  // serialize the transaction (with fees, gas, nonce)\n  const serializableTransaction = await toSerializableTransaction({\n    transaction: {\n      ...transaction,\n      gas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    },\n    from: account.address,\n  });\n\n  return {\n    ...serializableTransaction,\n    ...transaction.eip712,\n    gasPerPubdata,\n    from: account.address as Hex,\n  };\n}\n\nfunction serializeTransactionEIP712(\n  transaction: EIP721TransactionSerializable & {\n    chainId: number;\n    customSignature: Hex;\n  },\n): Hex {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    from,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    customSignature,\n    factoryDeps,\n    paymaster,\n    paymasterInput,\n    gasPerPubdata,\n    data,\n  } = transaction;\n\n  const serializedTransaction = [\n    nonce ? toHex(nonce) : \"0x\",\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : \"0x\",\n    maxFeePerGas ? toHex(maxFeePerGas) : \"0x\",\n    gas ? toHex(gas) : \"0x\",\n    to ?? \"0x\",\n    value ? toHex(value) : \"0x\",\n    data ?? \"0x0\",\n    toHex(chainId),\n    toHex(\"\"),\n    toHex(\"\"),\n    toHex(chainId),\n    from ?? \"0x\",\n    gasPerPubdata ? toHex(gasPerPubdata) : toHex(gasPerPubdataDefault),\n    factoryDeps ?? [],\n    customSignature ?? \"0x\", // EIP712 signature\n    paymaster && paymasterInput ? [paymaster, paymasterInput] : [],\n  ];\n\n  // @ts-ignore - TODO: fix types\n  return concatHex([\"0x71\", toRlp(serializedTransaction)]);\n}\n","import type { Hex } from \"./is-hex.js\";\n\n/**\n * Concatenates an array of hexadecimal values into a single hexadecimal value.\n *\n * @param values - An array of hexadecimal values to concatenate.\n * @returns The concatenated hexadecimal value.\n * @utils\n */\nexport function concatHex(values: readonly Hex[]): Hex {\n  return `0x${(values as Hex[]).reduce(\n    (acc, x) => acc + x.replace(\"0x\", \"\"),\n    \"\",\n  )}`;\n}\n","export const maxInt8 = 2n ** (8n - 1n) - 1n\nexport const maxInt16 = 2n ** (16n - 1n) - 1n\nexport const maxInt24 = 2n ** (24n - 1n) - 1n\nexport const maxInt32 = 2n ** (32n - 1n) - 1n\nexport const maxInt40 = 2n ** (40n - 1n) - 1n\nexport const maxInt48 = 2n ** (48n - 1n) - 1n\nexport const maxInt56 = 2n ** (56n - 1n) - 1n\nexport const maxInt64 = 2n ** (64n - 1n) - 1n\nexport const maxInt72 = 2n ** (72n - 1n) - 1n\nexport const maxInt80 = 2n ** (80n - 1n) - 1n\nexport const maxInt88 = 2n ** (88n - 1n) - 1n\nexport const maxInt96 = 2n ** (96n - 1n) - 1n\nexport const maxInt104 = 2n ** (104n - 1n) - 1n\nexport const maxInt112 = 2n ** (112n - 1n) - 1n\nexport const maxInt120 = 2n ** (120n - 1n) - 1n\nexport const maxInt128 = 2n ** (128n - 1n) - 1n\nexport const maxInt136 = 2n ** (136n - 1n) - 1n\nexport const maxInt144 = 2n ** (144n - 1n) - 1n\nexport const maxInt152 = 2n ** (152n - 1n) - 1n\nexport const maxInt160 = 2n ** (160n - 1n) - 1n\nexport const maxInt168 = 2n ** (168n - 1n) - 1n\nexport const maxInt176 = 2n ** (176n - 1n) - 1n\nexport const maxInt184 = 2n ** (184n - 1n) - 1n\nexport const maxInt192 = 2n ** (192n - 1n) - 1n\nexport const maxInt200 = 2n ** (200n - 1n) - 1n\nexport const maxInt208 = 2n ** (208n - 1n) - 1n\nexport const maxInt216 = 2n ** (216n - 1n) - 1n\nexport const maxInt224 = 2n ** (224n - 1n) - 1n\nexport const maxInt232 = 2n ** (232n - 1n) - 1n\nexport const maxInt240 = 2n ** (240n - 1n) - 1n\nexport const maxInt248 = 2n ** (248n - 1n) - 1n\nexport const maxInt256 = 2n ** (256n - 1n) - 1n\n\nexport const minInt8 = -(2n ** (8n - 1n))\nexport const minInt16 = -(2n ** (16n - 1n))\nexport const minInt24 = -(2n ** (24n - 1n))\nexport const minInt32 = -(2n ** (32n - 1n))\nexport const minInt40 = -(2n ** (40n - 1n))\nexport const minInt48 = -(2n ** (48n - 1n))\nexport const minInt56 = -(2n ** (56n - 1n))\nexport const minInt64 = -(2n ** (64n - 1n))\nexport const minInt72 = -(2n ** (72n - 1n))\nexport const minInt80 = -(2n ** (80n - 1n))\nexport const minInt88 = -(2n ** (88n - 1n))\nexport const minInt96 = -(2n ** (96n - 1n))\nexport const minInt104 = -(2n ** (104n - 1n))\nexport const minInt112 = -(2n ** (112n - 1n))\nexport const minInt120 = -(2n ** (120n - 1n))\nexport const minInt128 = -(2n ** (128n - 1n))\nexport const minInt136 = -(2n ** (136n - 1n))\nexport const minInt144 = -(2n ** (144n - 1n))\nexport const minInt152 = -(2n ** (152n - 1n))\nexport const minInt160 = -(2n ** (160n - 1n))\nexport const minInt168 = -(2n ** (168n - 1n))\nexport const minInt176 = -(2n ** (176n - 1n))\nexport const minInt184 = -(2n ** (184n - 1n))\nexport const minInt192 = -(2n ** (192n - 1n))\nexport const minInt200 = -(2n ** (200n - 1n))\nexport const minInt208 = -(2n ** (208n - 1n))\nexport const minInt216 = -(2n ** (216n - 1n))\nexport const minInt224 = -(2n ** (224n - 1n))\nexport const minInt232 = -(2n ** (232n - 1n))\nexport const minInt240 = -(2n ** (240n - 1n))\nexport const minInt248 = -(2n ** (248n - 1n))\nexport const minInt256 = -(2n ** (256n - 1n))\n\nexport const maxUint8 = 2n ** 8n - 1n\nexport const maxUint16 = 2n ** 16n - 1n\nexport const maxUint24 = 2n ** 24n - 1n\nexport const maxUint32 = 2n ** 32n - 1n\nexport const maxUint40 = 2n ** 40n - 1n\nexport const maxUint48 = 2n ** 48n - 1n\nexport const maxUint56 = 2n ** 56n - 1n\nexport const maxUint64 = 2n ** 64n - 1n\nexport const maxUint72 = 2n ** 72n - 1n\nexport const maxUint80 = 2n ** 80n - 1n\nexport const maxUint88 = 2n ** 88n - 1n\nexport const maxUint96 = 2n ** 96n - 1n\nexport const maxUint104 = 2n ** 104n - 1n\nexport const maxUint112 = 2n ** 112n - 1n\nexport const maxUint120 = 2n ** 120n - 1n\nexport const maxUint128 = 2n ** 128n - 1n\nexport const maxUint136 = 2n ** 136n - 1n\nexport const maxUint144 = 2n ** 144n - 1n\nexport const maxUint152 = 2n ** 152n - 1n\nexport const maxUint160 = 2n ** 160n - 1n\nexport const maxUint168 = 2n ** 168n - 1n\nexport const maxUint176 = 2n ** 176n - 1n\nexport const maxUint184 = 2n ** 184n - 1n\nexport const maxUint192 = 2n ** 192n - 1n\nexport const maxUint200 = 2n ** 200n - 1n\nexport const maxUint208 = 2n ** 208n - 1n\nexport const maxUint216 = 2n ** 216n - 1n\nexport const maxUint224 = 2n ** 224n - 1n\nexport const maxUint232 = 2n ** 232n - 1n\nexport const maxUint240 = 2n ** 240n - 1n\nexport const maxUint248 = 2n ** 248n - 1n\nexport const maxUint256 = 2n ** 256n - 1n\n","import { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport {\n  type CreateCursorErrorType,\n  type Cursor,\n  createCursor,\n} from '../cursor.js'\n\nimport { type HexToBytesErrorType, hexToBytes } from './toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from './toHex.js'\n\nexport type RecursiveArray<T> = T | readonly RecursiveArray<T>[]\n\ntype To = 'hex' | 'bytes'\n\ntype Encodable = {\n  length: number\n  encode(cursor: Cursor): void\n}\n\nexport type ToRlpReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type ToRlpErrorType =\n  | CreateCursorErrorType\n  | BytesToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\nexport function toRlp<to extends To = 'hex'>(\n  bytes: RecursiveArray<ByteArray> | RecursiveArray<Hex>,\n  to: to | To | undefined = 'hex',\n): ToRlpReturnType<to> {\n  const encodable = getEncodable(bytes)\n  const cursor = createCursor(new Uint8Array(encodable.length))\n  encodable.encode(cursor)\n\n  if (to === 'hex') return bytesToHex(cursor.bytes) as ToRlpReturnType<to>\n  return cursor.bytes as ToRlpReturnType<to>\n}\n\nexport type BytesToRlpErrorType = ToRlpErrorType | ErrorType\n\nexport function bytesToRlp<to extends To = 'bytes'>(\n  bytes: RecursiveArray<ByteArray>,\n  to: to | To | undefined = 'bytes',\n): ToRlpReturnType<to> {\n  return toRlp(bytes, to)\n}\n\nexport type HexToRlpErrorType = ToRlpErrorType | ErrorType\n\nexport function hexToRlp<to extends To = 'hex'>(\n  hex: RecursiveArray<Hex>,\n  to: to | To | undefined = 'hex',\n): ToRlpReturnType<to> {\n  return toRlp(hex, to)\n}\n\nfunction getEncodable(\n  bytes: RecursiveArray<ByteArray> | RecursiveArray<Hex>,\n): Encodable {\n  if (Array.isArray(bytes))\n    return getEncodableList(bytes.map((x) => getEncodable(x)))\n  return getEncodableBytes(bytes as any)\n}\n\nfunction getEncodableList(list: Encodable[]): Encodable {\n  const bodyLength = list.reduce((acc, x) => acc + x.length, 0)\n\n  const sizeOfBodyLength = getSizeOfLength(bodyLength)\n  const length = (() => {\n    if (bodyLength <= 55) return 1 + bodyLength\n    return 1 + sizeOfBodyLength + bodyLength\n  })()\n\n  return {\n    length,\n    encode(cursor: Cursor) {\n      if (bodyLength <= 55) {\n        cursor.pushByte(0xc0 + bodyLength)\n      } else {\n        cursor.pushByte(0xc0 + 55 + sizeOfBodyLength)\n        if (sizeOfBodyLength === 1) cursor.pushUint8(bodyLength)\n        else if (sizeOfBodyLength === 2) cursor.pushUint16(bodyLength)\n        else if (sizeOfBodyLength === 3) cursor.pushUint24(bodyLength)\n        else cursor.pushUint32(bodyLength)\n      }\n      for (const { encode } of list) {\n        encode(cursor)\n      }\n    },\n  }\n}\n\nfunction getEncodableBytes(bytesOrHex: ByteArray | Hex): Encodable {\n  const bytes =\n    typeof bytesOrHex === 'string' ? hexToBytes(bytesOrHex) : bytesOrHex\n\n  const sizeOfBytesLength = getSizeOfLength(bytes.length)\n  const length = (() => {\n    if (bytes.length === 1 && bytes[0] < 0x80) return 1\n    if (bytes.length <= 55) return 1 + bytes.length\n    return 1 + sizeOfBytesLength + bytes.length\n  })()\n\n  return {\n    length,\n    encode(cursor: Cursor) {\n      if (bytes.length === 1 && bytes[0] < 0x80) {\n        cursor.pushBytes(bytes)\n      } else if (bytes.length <= 55) {\n        cursor.pushByte(0x80 + bytes.length)\n        cursor.pushBytes(bytes)\n      } else {\n        cursor.pushByte(0x80 + 55 + sizeOfBytesLength)\n        if (sizeOfBytesLength === 1) cursor.pushUint8(bytes.length)\n        else if (sizeOfBytesLength === 2) cursor.pushUint16(bytes.length)\n        else if (sizeOfBytesLength === 3) cursor.pushUint24(bytes.length)\n        else cursor.pushUint32(bytes.length)\n        cursor.pushBytes(bytes)\n      }\n    },\n  }\n}\n\nfunction getSizeOfLength(length: number) {\n  if (length < 2 ** 8) return 1\n  if (length < 2 ** 16) return 2\n  if (length < 2 ** 24) return 3\n  if (length < 2 ** 32) return 4\n  throw new BaseError('Length is too large.')\n}\n","import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Choice: a ? b : c\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = SHA256_IV[0] | 0;\n  B = SHA256_IV[1] | 0;\n  C = SHA256_IV[2] | 0;\n  D = SHA256_IV[3] | 0;\n  E = SHA256_IV[4] | 0;\n  F = SHA256_IV[5] | 0;\n  G = SHA256_IV[6] | 0;\n  H = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n","import { sha256 as noble_sha256 } from '@noble/hashes/sha256'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type Sha256Hash<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type Sha256ErrorType =\n  | IsHexErrorType\n  | ToBytesErrorType\n  | ToHexErrorType\n  | ErrorType\n\nexport function sha256<to extends To = 'hex'>(\n  value: Hex | ByteArray,\n  to_?: to | undefined,\n): Sha256Hash<to> {\n  const to = to_ || 'hex'\n  const bytes = noble_sha256(\n    isHex(value, { strict: false }) ? toBytes(value) : value,\n  )\n  if (to === 'bytes') return bytes as Sha256Hash<to>\n  return toHex(bytes) as Sha256Hash<to>\n}\n"],"names":["async","eth_sendRawTransaction","request","signedTransaction","method","params","toBigInt","value","includes","Number","isInteger","Error","Uint8Array","BigInt","uint8ArrayToHex","maxBytecodeSize","maxUint16","BytecodeLengthExceedsMaxSizeError","BaseError","constructor","_ref","givenLength","super","name","BytecodeLengthInWordsMustBeOddError","_ref2","givenLengthInWords","BytecodeLengthMustBeDivisibleBy32Error","_ref3","gasPerPubdataDefault","getEip712Domain","transaction","message","gas","nonce","to","from","maxFeePerGas","maxPriorityFeePerGas","paymaster","paymasterInput","gasPerPubdata","data","factoryDeps","txType","gasLimit","gasPerPubdataByteLimit","map","dep","toHex","bytecode","bytecodeBytes","toBytes","length","hashStr","sha256","hash","bytecodeLengthInWords","bytecodeLength","bytecodeLengthPadded","pad","size","codeHashVersion","set","hashBytecode","transactionToMessage","domain","version","chainId","types","Transaction","type","primaryType","sendEip712Transaction","options","account","eip712Transaction","populateEip712Transaction","signEip712Transaction","chain","id","rpc","getRpcClient","transactionHash","client","eip712Domain","customSignature","signTypedData","serializedTransaction","concatHex","toRlp","serializeTransactionEIP712","eip712","Promise","all","encode","resolvePromisedValue","result","address","numberToHex","undefined","eip712Meta","Array","hexToBytes","gas_limit","max_fee_per_gas","max_priority_fee_per_gas","gas_per_pubdata_limit","toSerializableTransaction","values","reduce","acc","x","replace","maxUint96","maxUint256","bytes","arguments","encodable","getEncodable","cursor","createCursor","bytesToHex","isArray","list","bodyLength","sizeOfBodyLength","getSizeOfLength","pushByte","pushUint8","pushUint16","pushUint24","pushUint32","getEncodableList","bytesOrHex","sizeOfBytesLength","pushBytes","getEncodableBytes","Maj","a","b","c","HashMD","Hash","blockLen","outputLen","padOffset","isLE","finished","pos","destroyed","this","buffer","view","createView","update","exists","len","take","Math","min","subarray","process","dataView","roundClean","digestInto","out","output","fill","i","byteOffset","setBigUint64","_32n","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","digest","res","slice","destroy","_cloneInto","SHA256_K","Uint32Array","SHA256_IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","rotr","s1","T1","T2","Chi","wrapConstructor","to_","noble_sha256","isHex","strict"],"sourceRoot":""}